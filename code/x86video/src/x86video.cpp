/*********************************************************************************************************
**
**                                    中国软件开源组织
**
**                                   嵌入式实时操作系统
**
**                                SylixOS(TM)  LW : long wing
**
**                               Copyright All Rights Reserved
**
**--------------文件信息--------------------------------------------------------------------------------
**
** 文   件   名: video.cpp
**
** 创   建   人: Zhao.Tongchen(赵童晨)
**
** 文件创建日期: 2017 年 11 月 10 日
**
** 描        述: YUV420文件播放器.
*********************************************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <pthread.h>
#include <sys/mman.h>
#include <system/device/graph/gmemDev.h>

/*********************************************************************************************************
  基本宏定义
*********************************************************************************************************/
#define nWidth          (640)                                           /*  帧宽度                      */
#define nHeight         (480)                                           /*  帧高度                      */
#define FrameSize       (nWidth*nHeight*3/2)                            /*  帧大小                      */
#define nFrame          (1421)                                          /*  帧数量                      */
#define maxFrame        (100)                                           /*  缓冲帧最大数量              */
#define FrameInterval   (50000)                                         /*  每帧间隔时间，单位微秒      */

#define MY(R,G,B)       ((0.299)*R + (0.587)*G + (0.114)*B)             /*  RGB转Y算法                  */
#define MU(R,G,B)       (-(0.169)*R - (0.332)*G+ (0.501)*B)             /*  RGB转U算法                  */
#define MV(R,G,B)       ( (0.450)*R - (0.419)*G - (0.081)*B )           /*  RGB转V算法                  */

#define MR(Y,U,V)       (Y + (1.403)*V)                                 /*  YUV转R算法                  */
#define MG(Y,U,V)       (Y - ( (0.3455) * U - ( (0.7169) * V ) ) )      /*  YUV转G算法                  */
#define MB(Y,U,V)       (Y + ((1.7790) * U))                            /*  YUV转B算法                  */

/*********************************************************************************************************
  以空间换时间的思想
  使用查表法将YUV转换为RGB
  全局变量表
*********************************************************************************************************/
static int Table_fv1[256] = { -180, -179, -177, -176, -174, -173, -172, -170, -169, -167, -166, -165, -163, -162, -160, -159, -158, -156, -155, -153, -152, -151, -149, -148, -146, -145, -144, -142, -141, -139, -138, -137,  -135, -134, -132, -131, -130, -128, -127, -125, -124, -123, -121, -120, -118, -117, -115, -114, -113, -111, -110, -108, -107, -106, -104, -103, -101, -100, -99, -97, -96, -94, -93, -92, -90,  -89, -87, -86, -85, -83, -82, -80, -79, -78, -76, -75, -73, -72, -71, -69, -68, -66, -65, -64,-62, -61, -59, -58, -57, -55, -54, -52, -51, -50, -48, -47, -45, -44, -43, -41, -40, -38, -37,  -36, -34, -33, -31, -30, -29, -27, -26, -24, -23, -22, -20, -19, -17, -16, -15, -13, -12, -10, -9, -8, -6, -5, -3, -2, 0, 1, 2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 136, 137, 138, 140, 141, 143, 144, 145, 147, 148,  150, 151, 152, 154, 155, 157, 158, 159, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178 };
static int Table_fv2[256] = { -92, -91, -91, -90, -89, -88, -88, -87, -86, -86, -85, -84, -83, -83, -82, -81, -81, -80, -79, -78, -78, -77, -76, -76, -75, -74, -73, -73, -72, -71, -71, -70, -69, -68, -68, -67, -66, -66, -65, -64, -63, -63, -62, -61, -61, -60, -59, -58, -58, -57, -56, -56, -55, -54, -53, -53, -52, -51, -51, -50, -49, -48, -48, -47, -46, -46, -45, -44, -43, -43, -42, -41, -41, -40, -39, -38, -38, -37, -36, -36, -35, -34, -33, -33, -32, -31, -31, -30, -29, -28, -28, -27, -26, -26, -25, -24, -23, -23, -22, -21, -21, -20, -19, -18, -18, -17, -16, -16, -15, -14, -13, -13, -12, -11, -11, -10, -9, -8, -8, -7, -6, -6, -5, -4, -3, -3, -2, -1, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22, 22, 23, 24, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 37, 38, 39, 40, 40, 41, 42, 42, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 55, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 62, 63, 64, 65, 65, 66, 67, 67, 68, 69, 70, 70, 71, 72, 72, 73, 74, 75, 75, 76, 77, 77, 78, 79, 80, 80, 81, 82, 82, 83, 84, 85, 85, 86, 87, 87, 88, 89, 90, 90 };
static int Table_fu1[256] = { -44, -44, -44, -43, -43, -43, -42, -42, -42, -41, -41, -41, -40, -40, -40, -39, -39, -39, -38, -38, -38, -37, -37, -37, -36, -36, -36, -35, -35, -35, -34, -34, -33, -33, -33, -32, -32, -32, -31, -31, -31, -30, -30, -30, -29, -29, -29, -28, -28, -28, -27, -27, -27, -26, -26, -26, -25, -25, -25, -24, -24, -24, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, -12, -12, -11, -11, -11, -10, -10, -10, -9, -9, -9, -8, -8, -8, -7, -7, -7, -6, -6, -6, -5, -5, -5, -4, -4, -4, -3, -3, -3, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43 };
static int Table_fu2[256] = { -227, -226, -224, -222, -220, -219, -217, -215, -213, -212, -210, -208, -206, -204, -203, -201, -199, -197, -196, -194, -192, -190, -188, -187, -185, -183, -181, -180, -178, -176, -174, -173, -171, -169, -167, -165, -164, -162, -160, -158, -157, -155, -153, -151, -149, -148, -146, -144, -142, -141, -139, -137, -135, -134, -132, -130, -128, -126, -125, -123, -121, -119, -118, -116, -114, -112, -110, -109, -107, -105, -103, -102, -100, -98, -96, -94, -93, -91, -89, -87, -86, -84, -82, -80, -79, -77, -75, -73, -71, -70, -68, -66, -64, -63, -61, -59, -57, -55, -54, -52, -50, -48, -47, -45, -43, -41, -40, -38, -36, -34, -32, -31, -29, -27, -25, -24, -22, -20, -18, -16, -15, -13, -11, -9, -8, -6, -4, -2, 0, 1, 3, 5, 7, 8, 10, 12, 14, 15, 17, 19, 21, 23, 24, 26, 28, 30, 31, 33, 35, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 54, 56, 58, 60, 62, 63, 65, 67, 69, 70, 72, 74, 76, 78, 79, 81, 83, 85, 86, 88, 90, 92, 93, 95, 97, 99, 101, 102, 104, 106, 108, 109, 111, 113, 115, 117, 118, 120, 122, 124, 125, 127, 129, 131, 133, 134, 136, 138, 140, 141, 143, 145, 147, 148, 150, 152, 154, 156, 157, 159, 161, 163, 164, 166, 168, 170, 172, 173, 175, 177, 179, 180, 182, 184, 186, 187, 189, 191, 193, 195, 196, 198, 200, 202, 203, 205, 207, 209, 211, 212, 214, 216, 218, 219, 221, 223, 225 };

/*********************************************************************************************************
  全局变量
*********************************************************************************************************/
static int iReadFrame     =   0;                                        /* 当前读入的帧数量             */
static int iPlayFrame     =   0;                                        /* 当前播放的帧数量             */

static int pointXY[nHeight][nWidth][maxFrame];                          /* 缓冲帧信息                   */

/*********************************************************************************************************
** 函数名称: rgbColor
** 功能描述: 将R,G,B信息组合为16进制Hex的值
** 输  入  : r          : 16进制r的值
**           g          : 16进制g的值
**           b          : 16进制b的值
** 输  出  : NONE
** 返  回  : 16进制Hex的值
*********************************************************************************************************/
static int rgbColor(int  r, int  g, int  b)
{
	return ((b<<16)+(g<<8)+(r));
}

/*********************************************************************************************************
** 函数名称: draw_pixel
** 功能描述: 将像素信息输出到指定位置
** 输  入  : *pframebuffer  : framebuffer指针
**           *scr_info      : fb的大小信息
**           *var_info      : fb的行列信息
**            x             : 输出点列位置
**            y             : 输出点行位置
**            colidx        : 需要输出的像素信息
** 输  出  : 像素颜色
** 返  回  : NONE
*********************************************************************************************************/
static void draw_pixel (void           *pframebuffer,
		                LW_GM_SCRINFO  *scr_info,
		                LW_GM_VARINFO  *var_info,
		                int             x,
		                int             y,
		                unsigned        colidx)
{
	if ( (x < 0) || (x >= var_info->GMVI_ulXResVirtual) ||
		(y < 0) || (y >= var_info->GMVI_ulYResVirtual)) {
		return;
	}
	switch (var_info->GMVI_ulBitsPerPixel) {
	case 16:
	{
		uint16_t *pusFrameBuffer;
		pusFrameBuffer = (uint16_t *)((uint8_t *)pframebuffer +
		y * scr_info->GMSI_stMemSizePerLine);
		pusFrameBuffer[x] = ((colidx & 0xFF0000) >> 16 >> 3 << 11) |
		((colidx & 0x00FF00) >> 8 >> 2 << 5) |
		((colidx & 0x0000FF) >> 0 >> 3 << 0);
	}
	break;

	case 24:

	case 32:
	{
		uint32_t *puiFrameBuffer;
		puiFrameBuffer = (uint32_t *)((uint8_t *)pframebuffer +
		y * scr_info->GMSI_stMemSizePerLine);
		puiFrameBuffer[x] = colidx;
	}
	break;

	}
}

/*********************************************************************************************************
** 函数名称: YV12ToRGB24_Table
** 功能描述: 将YUV编码转换为RGB编码
** 输  入  : *pYUV          : YUV文件指针
**           *pBGR24        : RGB文件指针
**            width         : 帧宽度
**            height        : 帧高度
** 输  出  : NONE
** 返  回  : 是否成功
*********************************************************************************************************/
bool YV12ToRGB24_Table(unsigned char*  &pYUV, unsigned char*  &pBGR24, int width, int height)
{
    if (width < 1 || height < 1 || pYUV == NULL || pBGR24 == NULL)
        return false;
    const long len = width * height;
    unsigned char* yData = pYUV;
    unsigned char* vData = &yData[len];
    unsigned char* uData = &vData[len >> 2];

    int bgr[3];
    int yIdx, uIdx, vIdx, idx;
    int rdif, invgdif, bdif;

    for (int i = 0;i < height;i++){
        for (int j = 0;j < width;j++){
            yIdx = i * width + j;
            vIdx = (i/2) * (width/2) + (j/2);
            uIdx = vIdx;

            rdif = Table_fv1[vData[vIdx]];
            invgdif = Table_fu1[uData[uIdx]] + Table_fv2[vData[vIdx]];
            bdif = Table_fu2[uData[uIdx]];

/*          YUV420 转 BGR24
            bgr[0] = yData[yIdx] + bdif;       //B
            bgr[1] = yData[yIdx] - invgdif;    //G
            bgr[2] = yData[yIdx] + rdif;       //R
*/
/*          YUV420 转 BGR24 */
            bgr[0] = yData[yIdx] + rdif;       //R
            bgr[1] = yData[yIdx] - invgdif;    //G
            bgr[2] = yData[yIdx] + bdif;       //B

            for (int e = 0;e < 3; e++)
            {
            	if(bgr[e] < 0 || bgr[e] > 255)
            		bgr[e] = (bgr[e] < 0)?0:255;
            }

            pointXY[i][j][iReadFrame] = rgbColor(bgr[0], bgr[1], bgr[2]);

            for (int k = 0;k < 3;k++){
                idx = (i * width + j) * 3 + k;
                pBGR24[idx] = bgr[k];
            }
        }
    }
  //  printf("read frame:%d\n", iReadFrame++);
    iReadFrame++;

    return true;
}

/*********************************************************************************************************
** 函数名称: *playVidoe
** 功能描述: 播放缓冲帧
** 输  入  : NONE
** 输  出  : 缓冲帧
** 返  回  : NONE
*********************************************************************************************************/
void *playVidoe (void *)
{
	int              i          =    0;
	int              j          =    0;
	int              Color      =    0;
	int              ret        =    0;
	int              fb_fd      =    0;

	float            time_use   =    0;
	struct timeval   start;
	struct timeval   end;

	LW_GM_SCRINFO    scr_info;
	LW_GM_VARINFO    var_info;
	void            *pframebuffer;

	fb_fd = open("/dev/fb0", O_RDWR, 0666);                                   /*  打开 fb 设备          */
	if (fb_fd < 0) {
		printf("failed to open /dev/fb0\n");

		return (NULL);
	}

	ret = ioctl(fb_fd, LW_GM_GET_SCRINFO, &scr_info);                         /*  获取 fb 的大小等参数  */
	if (ret < 0) {
		printf("failed to get /dev/fb0 screen info\n");
		close(fb_fd);

		return (NULL);
	}

	ret = ioctl(fb_fd, LW_GM_GET_VARINFO, &var_info);                         /*  获取 fb 行列信息等    */
	if (ret < 0) {
		printf("failed to get /dev/fb0 var info\n");
		close(fb_fd);

		return (NULL);
	}

	printf("the mem size :%d\n",                                              /*  fb 占用内存的大小     */
	scr_info.GMSI_stMemSize);

	printf("the line_length is :%d\n",                                        /*  fb 每行像素点字节数   */
	scr_info.GMSI_stMemSizePerLine);

	printf("the xres is :%d\n",                                               /*  fb 显示区域高度       */
	(int)var_info.GMVI_ulXRes);

	printf("the yres is :%d\n",                                               /*  fb 显示区域宽度       */
	(int)var_info.GMVI_ulYRes);

	printf("bits_per_pixel is :%d\n",                                         /*  fb 单像素点的 bits    */
	(int)var_info.GMVI_ulBitsPerPixel);

	/*
	* 将 framebuffer 物理内存映射到用户空间
	*/
	pframebuffer = mmap(NULL, scr_info.GMSI_stMemSize,
	PROT_READ | PROT_WRITE, MAP_SHARED, fb_fd, 0);

	if (pframebuffer == MAP_FAILED) {
		printf("failed to mmap /dev/fb0\n");
		close(fb_fd);

		return (NULL);
	}

	printf("!!!!!!!!!!!!!!!!!!!!!!\n");
	memset(pframebuffer, 0xFF,                                                /*  屏幕全白              */
	scr_info.GMSI_stMemSize);

	sleep(1);

	while(iReadFrame <= (maxFrame-10));                                       /*  从缓冲帧数量达到      */
	                                                                          /*    上限的一半开始播放  */

	while(1)                                                                  /*  将缓冲帧显示到屏幕    */
	{
		for (iPlayFrame = 0; iPlayFrame < maxFrame;iPlayFrame++) {

			gettimeofday(&start,NULL);

			for (j = 0; j< nHeight;j++) {
				for (i = 0;i < nWidth;i++) {
					Color = pointXY[j][i][iPlayFrame];

					draw_pixel(pframebuffer, &scr_info, &var_info, i, j, Color);
				}
			}

			do {
				gettimeofday(&end,NULL);

				time_use=(end.tv_sec-start.tv_sec)*1000000+(end.tv_usec-start.tv_usec);//微秒
			}while(time_use <= FrameInterval);

			gettimeofday(&end,NULL);

			time_use=(end.tv_sec-start.tv_sec)*1000000+(end.tv_usec-start.tv_usec);//微秒
			printf("draw frame time_use is %f us\n",time_use);
		}
	}

	/*
	* 程序退出前，释放占用的相关资源
	*/
	munmap(pframebuffer, scr_info.GMSI_stMemSize);
	close(fb_fd);

	printf("framebuffer exit\n");

	pthread_exit(NULL);                                                       /*  线程退出              */

	return (NULL);
}

/*********************************************************************************************************
** 函数名称: main
** 功能描述: 主函数，读取文件，创建线程，主线程解码，子线程播放
** 输  入  :  argc       : 参数数量
**          **argv       : 参数字符串指针
** 输  出  : NONE
** 返  回  : 错误号
*********************************************************************************************************/
int main (int argc, char **argv)
{
	int            i         = 0;
	int            n         = 0;

	char          *filepath  = "play.yuv";

	unsigned char *pBuf      = new unsigned  char[FrameSize];
	unsigned char *rgbPtr    = new unsigned  char[FrameSize*2];

	pthread_t      tid;

	FILE          *f ;

	if (argc > 1) {
		if (argc > 2){
			printf("Wrong Input!\n");

			return(-1);
		}
		strcpy(filepath, argv[1]);
	}

    if(!(f = fopen(filepath, "rb"))) {                                      /*  打开文件               */
        printf("Can not open file: %s\n", filepath);

        return (-1);
    }

	pthread_create(&tid, NULL, playVidoe, (void *)NULL);                     /*  创建线程，负责播放     */

	do
	{
		for (i = 0; i < maxFrame; i++) {
			fread(pBuf, 1, FrameSize, f);                                    /*  读入一帧YUV            */

			YV12ToRGB24_Table(pBuf, rgbPtr, nWidth, nHeight);                /*  转为RGB码并存入缓冲帧  */

			printf("read frame %d\n", n);

			n++;

			if (n >= nFrame)                                                 /*  读完所有帧             */
			{
				rewind(f);                                                   /*  指针指向文件头         */
				n = 0;
			}
		}

		while(iPlayFrame <= (maxFrame-20));                                  /*  加入等待               */
                                                                             /*  防止转码速度过快       */
		iReadFrame = 0;

	}while(n <= nFrame);

	fclose(f);

	return (0);
}

/*********************************************************************************************************
  END
*********************************************************************************************************/
